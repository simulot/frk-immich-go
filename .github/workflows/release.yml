name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: windows
            goarch: arm
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build
      run: |
        go build -o immich-go-${{ matrix.goos }}-${{ matrix.goarch }}
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }} 
        GOARCH: ${{ matrix.goarch }} 

    - name: Set exec flag for Linux
      if: matrix.goos != 'windows'
      run: chmod +x immich-go-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Create archive
      run: |
        mkdir -p dist/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}
        cp immich-go-${{ matrix.goos }}-${{ matrix.goarch }} dist/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}/immich-go${{ matrix.goos == 'windows' && '.exe' || '' }}
        cp readme.md dist/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}/
        if [ "${{ matrix.goos }}" == "windows" ]; then
          zip -r immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.zip dist/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}
        else
          tar -czvf immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C dist immich-go-${{ matrix.goos }}-${{ matrix.goarch }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: immich-go-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          ${{ matrix.goos == 'windows' && format('immich-go-{0}-{1}.zip', matrix.goos, matrix.goarch) || format('immich-go-{0}-{1}.tar.gz', matrix.goos, matrix.goarch) }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        for file in *.tar.gz *.zip; do
          sha256sum $file >> checksums.txt
        done

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        asset_name: immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets (Windows)
      if: matrix.goos == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        asset_name: immich-go-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        asset_content_type: application/zip